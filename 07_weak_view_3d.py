# -*- coding: utf-8 -*-
"""07_weak_view_3D.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1egoaA1tZ_dM-Ski--6hs8EWLbGNrdPGs
"""

#@title Вывод 3D точек из файла trc

"""1. Hip
2. RHip
3. RKnee
4. RAnkle
5. RBigToe
6. RSmallToe
7. RHeel
8. LHip
9. LKnee
10. LAnkle
11. LBigToe
12. LSmallToe
13. LHeel
14. Neck
15. Head
16. Nose
17. RShoulder
18. RElbow
19. RWrist
20. LShoulder
21. LElbow
22. LWrist

### Соединения между точками:
- Hip (1) соединяется с RHip (2) и LHip (8)
- RHip (2) соединяется с RKnee (3)
- RKnee (3) соединяется с RAnkle (4)
- RAnkle (4) соединяется с RHeel (7), RBigToe (5) и RSmallToe (6)
- LHip (8) соединяется с LKnee (9)
- LKnee (9) соединяется с LAnkle (10)
- LAnkle (10) соединяется с LHeel (13), LBigToe (11) и LSmallToe (12)
- Hip (1) соединяется с Neck (14)
- Neck (14) соединяется с Head (15)
- Head (15) соединяется с Nose (16)
- Neck (14) соединяется с RShoulder (17) и LShoulder (20)
- RShoulder (17) соединяется с RElbow (18)
- RElbow (18) соединяется с RWrist (19)
- LShoulder (20) соединяется с LElbow (21)
- LElbow (21) соединяется с LWrist (22)

- **Hip**: Точка, представляющая таз.
- **RHip**: Правый тазобедренный сустав.
- **RKnee**: Правое колено.
- **RAnkle**: Правый голеностопный сустав.
- **RBigToe**: Большой палец правой ноги.
- **RSmallToe**: Маленький палец правой ноги.
- **RHeel**: Пятка правой ноги.
- **LHip**: Левый тазобедренный сустав.
- **LKnee**: Левое колено.
- **LAnkle**: Левый голеностопный сустав.
- **LBigToe**: Большой палец левой ноги.
- **LSmallToe**: Маленький палец левой ноги.
- **LHeel**: Пятка левой ноги.
- **Neck**: Шея.
- **Head**: Голова.
- **Nose**: Нос.
- **RShoulder**: Правое плечо.
- **RElbow**: Правой локоть.
- **RWrist**: Правое запястье.
- **LShoulder**: Левое плечо.
- **LElbow**: Левый локоть.
- **LWrist**: Левое запястье.
"""

import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation
from IPython.display import HTML

# Чтение файла, пропуская первые 4 строки
filename = '/content/Karate.trc'
points = pd.read_csv(filename, sep='\t', skiprows=4)

# Определяем соединения между точками скелета
connections = [
    (0, 1), (0, 7),  # Hip (1) соединяется с RHip (2) и LHip (8)
    (1, 2),          # RHip (2) соединяется с RKnee (3)
    (2, 3),          # RKnee (3) соединяется с RAnkle (4)
    (3, 4), (3, 5), (3, 6),  # RAnkle (4) соединяется с RHeel (7), RBigToe (5) и RSmallToe (6)
    (7, 8),          # LHip (8) соединяется с LKnee (9)
    (8, 9),          # LKnee (9) соединяется с LAnkle (10)
    (9, 10), (9, 11), (9, 12),  # LAnkle (10) соединяется с LHeel (13), LBigToe (11) и LSmallToe (12)
    (0, 13),        # Hip (1) соединяется с Neck (14)
    (13, 14),       # Neck (14) соединяется с Head (15)
    (14, 15),       # Head (15) соединяется с Nose (16)
    (13, 16), (13, 19),  # Neck (14) соединяется с RShoulder (17) и LShoulder (20)
    (16, 17),       # RShoulder (17) соединяется с RElbow (18)
    (17, 18),       # RElbow (18) соединяется с RWrist (19)
    (19, 20),       # LShoulder (20) соединяется с LElbow (21)
    (20, 21)        # LElbow (21) соединяется с LWrist (22)
]

# Настройки графика
fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111, projection='3d')
ax.set_xlabel('X координаты')
ax.set_ylabel('Y координаты')
ax.set_zlabel('Z координаты')

# Функция для обновления графика
def update(frame):
    ax.cla()  # Очистка осей
    ax.set_xlabel('X координаты')
    ax.set_ylabel('Y координаты')
    ax.set_zlabel('Z координаты')

    # Извлечение координат X, Y, Z для 22 маркеров для выбранного кадра
    coordinates = points.iloc[frame, 2:2 + 66].values.reshape(-1, 3).astype(float)

    # Отделяем X, Y, Z для удобства
    x = coordinates[:, 0]
    y = coordinates[:, 1]
    z = coordinates[:, 2]

    # Отображаем точки
    ax.scatter(x, y, z, color='b')

    # Соединяем точки по заданным соединениям
    for start, end in connections:
        ax.plot([x[start], x[end]], [y[start], y[end]], [z[start], z[end]], color='r')

    plt.title(f'Кадр {frame}')

# Создание анимации
ani = FuncAnimation(fig, update, frames=range(len(points)), repeat=True)

# Отображение анимации
plt.close(fig)  # Закрываем фигуру, чтобы избежать дублирования
HTML(ani.to_jshtml())

#@title График движения точки таза склета в проекции плоскостей



import pandas as pd
import matplotlib.pyplot as plt

# Чтение файла, пропуская первые 4 строки
filename = '/content/Karate.trc'
points = pd.read_csv(filename, sep='\t', skiprows=4)

# Индекс точки Hip
hip_index = 0  # Индекс точки Hip (1)

# Извлечение координат X, Y, Z для точки Hip
hip_coordinates = points.iloc[:, 2 + hip_index * 3:2 + (hip_index + 1) * 3].values

# Настройки графика
fig, ax = plt.subplots(figsize=(12, 8))
ax.set_xlabel('Кадры')
ax.set_ylabel('Координаты')
ax.set_title('Изменение координат точки Hip (X, Y, Z) в зависимости от кадра')

# Создание линий для X, Y, Z
ax.plot(range(len(hip_coordinates)), hip_coordinates[:, 0], label='X', color='r')
ax.plot(range(len(hip_coordinates)), hip_coordinates[:, 1], label='Y', color='g')
ax.plot(range(len(hip_coordinates)), hip_coordinates[:, 2], label='Z', color='b')

# Установка пределов для осей
ax.set_xlim(0, len(points))
ax.set_ylim(hip_coordinates.min() - 1, hip_coordinates.max() + 1)

# Добавление легенды
ax.legend()

# Отображение графика
plt.show()

"""#!Таз возвращается в исходную точку!)"""